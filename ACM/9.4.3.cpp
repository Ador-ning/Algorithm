//
// Created by ning on 2019/8/15.
//

#include <iostream>
#include <vector>

using namespace std;

// 树上的动态规划
	// 问题1：树的最大独立集  - 设 d[i] 表示以 i 为根结点的子树的最大独立集大小
// 结点i -- 选或者不选 // 比较做出选择
	// 不选i --> 则问题转化成 求出 i 结点的所有儿子d值和
	// 选i   --> 则问题转化成 求出 i 结点的所有孙子d值和
	//  -- 当计算出一个 d[i] 后，用它去更新 i 的父亲和祖父结点值即可

	// 问题2：树的重心 -->  设d[i] 表示以 i 为根的子树的结点个数
// d[i] = 1 + d[j] --- j 为 i 的儿子结点
// 删除 i 结点后，最大的连通块结点数目

	// 问题3：树的最长路径   --> 设 d[i] 表示根结点为i的树中根到叶子的最大距离
// 状态转移方程 -- d[i] = max{d[j]} + 1  // j 表示 i 的子结点集合
// 以结点i 为根该树最长路径 d[u] + d[v] + 1 // u   v 表示 i 的子结点集合 第一 第二

/*
	树的最大独立集  --  对于一棵 n 个结点的无根树，选出尽量多的结点
        -- 使得任何两个结点均不相邻
        -- 然后输人 n-1 条边 / 输出一个最大独立集
 * */

